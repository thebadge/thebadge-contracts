/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  KlerosBadgeTypeController,
  KlerosBadgeTypeControllerInterface,
} from "../../../../src/badgeTypes/kleros.sol/KlerosBadgeTypeController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_theBadge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_arbitrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tcrFactory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__claimBadge_insufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_TCRListAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_badgeTypeAlreadyCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_alreadyMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_isPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongBadgeType",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongValue",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__onlyTheBadge_senderNotTheBadge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "badgeTypeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "evidence",
        type: "string",
      },
    ],
    name: "MintKlerosBadge",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "klerosTCRAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "registrationMetadata",
        type: "string",
      },
    ],
    name: "NewKlerosStrategy",
    type: "event",
  },
  {
    inputs: [],
    name: "arbitrator",
    outputs: [
      {
        internalType: "contract IArbitrator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
    ],
    name: "badgeRequestValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "canRequestBadge",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "claimBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "createBadgeType",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "klerosBadge",
    outputs: [
      {
        internalType: "bytes32",
        name: "itemID",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "klerosBadgeType",
    outputs: [
      {
        internalType: "address",
        name: "tcrList",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "requestBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tcrFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "theBadge",
    outputs: [
      {
        internalType: "contract ITheBadge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200154f3803806200154f833981016040819052620000349162000094565b600080546001600160a01b039485166001600160a01b031991821617909155600180549385169382169390931790925560028054919093169116179055620000de565b80516001600160a01b03811681146200008f57600080fd5b919050565b600080600060608486031215620000aa57600080fd5b620000b58462000077565b9250620000c56020850162000077565b9150620000d56040850162000077565b90509250925092565b61146180620000ee6000396000f3fe6080604052600436106100a05760003560e01c80639f780b1d116100645780639f780b1d146101d5578063b42f3ba1146101f5578063c833b0a914610208578063caa39ec51461021b578063e677413b1461023b578063eccc52e31461025b57600080fd5b80631f212590146100ac5780633656eec2146100ff5780636cc6cde11461012d57806383a1be0a1461014d5780639e516bd11461016257600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100e26100c7366004610bb2565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010b57600080fd5b5061011f61011a366004610bf3565b61028b565b6040519081526020016100f6565b34801561013957600080fd5b506001546100e2906001600160a01b031681565b61016061015b366004610c6c565b610375565b005b34801561016e57600080fd5b506101b261017d366004610bf3565b600460209081526000928352604080842090915290825290208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b039092166020840152908201526060016100f6565b3480156101e157600080fd5b506002546100e2906001600160a01b031681565b610160610203366004610cb8565b610652565b610160610216366004610bf3565b6107eb565b34801561022757600080fd5b506000546100e2906001600160a01b031681565b34801561024757600080fd5b5061011f610256366004610bb2565b610951565b34801561026757600080fd5b5061027b610276366004610bf3565b610aba565b60405190151581526020016100f6565b6000828152600360209081526040808320600483528184206001600160a01b038087168652935290832081549192909116156103685781548154604051634aac84e560e01b81526001600160a01b03909216916000918391634aac84e5916102f99160040190815260200190565b606060405180830381865afa158015610316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033a9190610d2b565b505090508060ff166001148061035357508060ff166003145b1561036557600194505050505061036f565b50505b6000925050505b92915050565b600083815260036020526040902080546001600160a01b0316156103ac57604051638c495fd560e01b815260040160405180910390fd5b6002546001600160a01b031660006103c684860186610f0e565b60015460608201516040519293506001600160a01b038086169363d8dcbd2793909116916103fa9160200190815260200190565b60408051601f1981840301815282825260808701516020840152910160408051601f19818403018152908290526104349291602001611069565b60405160208183030381529060405260008560a001518660c0015187602001518861010001518960e001518a61012001518b604001516040518b63ffffffff1660e01b815260040161048f9a999897969594939291906110ed565b600060405180830381600087803b1580156104a957600080fd5b505af11580156104bd573d6000803e3d6000fd5b5050505060006001836001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906111b0565b61053191906111df565b60405163a2f7b3a560e01b8152600481018290529091506000906001600160a01b0385169063a2f7b3a5906024016020604051808303816000875af115801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a291906111f2565b90506001600160a01b0381166105cb5760405163f4864ae560e01b815260040160405180910390fd5b60408051602080820183526001600160a01b0384811680845260008d8152600390935291849020925183546001600160a01b031916911617909155845160a0860151925191928b927ff7f466799ed46d224714e441561b597805d1b1d051632820ee9f06969c851de592610640929091611216565b60405180910390a35050505050505050565b600061065d85610951565b905080341461067f5760405163361e7e3b60e21b815260040160405180910390fd5b6000858152600360205260408120805490916001600160a01b03909116906106a985870187611244565b80516040516309fa7ca560e21b81529192506001600160a01b038416916327e9f2949134916106db91906004016112c7565b6000604051808303818588803b1580156106f457600080fd5b505af1158015610708573d6000803e3d6000fd5b50505050506040518060600160405280826000015160405160200161072d91906112da565b60408051808303601f19018152918152815160209283012083526001600160a01b038d8116848401819052349483019490945260008d8152600484528281208d83168083529085529083902086518155938601516001850180546001600160a01b031916919093161790915593810151600290920191909155835190518b92917e5f9a2814a1b2f0b782939610bff263042d3460b58e0663e1b1705e8aad4891916107d891906112c7565b60405180910390a4505050505050505050565b600082815260036020908152604080832060048084528285206001600160a01b0380881687529452938290208154815493516374e120b360e11b8152929591941692839263e9c241669261084492910190815260200190565b600060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b5050600054604051635695430160e01b81526001600160a01b039091169250635695430191506108ab908890889060029060040161130c565b600060405180830381600087803b1580156108c557600080fd5b505af11580156108d9573d6000803e3d6000fd5b505050504782600201541115610902576040516303854c6760e41b815260040160405180910390fd5b600182015460028301546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610942573d6000803e3d6000fd5b50506000600290910155505050565b6000818152600360205260408082208054600154835163063d63db60e11b8152935192936001600160a01b039283169386939092169163f7434ea9918591630c7ac7b69160048082019288929091908290030181865afa1580156109b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e1919081019061134e565b6040518263ffffffff1660e01b81526004016109fd91906112c7565b602060405180830381865afa158015610a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e91906111b0565b90506000826001600160a01b031663bb0b86ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa491906111b0565b9050610ab081836113bc565b9695505050505050565b60008054604051633cc5d99960e21b8152600481018590526001600160a01b0384811660248301528392169063f3176664906044016040805180830381865afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f91906113cf565b905080602001516000148015610b735750600181516004811115610b5557610b556112f6565b1480610b735750600281516004811115610b7157610b716112f6565b145b15610b8257600091505061036f565b60008160200151118015610b995750806020015142105b15610ba857600091505061036f565b5060019392505050565b600060208284031215610bc457600080fd5b5035919050565b6001600160a01b0381168114610be057600080fd5b50565b8035610bee81610bcb565b919050565b60008060408385031215610c0657600080fd5b823591506020830135610c1881610bcb565b809150509250929050565b60008083601f840112610c3557600080fd5b50813567ffffffffffffffff811115610c4d57600080fd5b602083019150836020828501011115610c6557600080fd5b9250929050565b600080600060408486031215610c8157600080fd5b83359250602084013567ffffffffffffffff811115610c9f57600080fd5b610cab86828701610c23565b9497909650939450505050565b600080600080600060808688031215610cd057600080fd5b8535610cdb81610bcb565b9450602086013593506040860135610cf281610bcb565b9250606086013567ffffffffffffffff811115610d0e57600080fd5b610d1a88828901610c23565b969995985093965092949392505050565b600080600060608486031215610d4057600080fd5b835160ff81168114610d5157600080fd5b602085015160409095015190969495509392505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715610da257610da2610d68565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610dd157610dd1610d68565b604052919050565b600067ffffffffffffffff821115610df357610df3610d68565b50601f01601f191660200190565b600082601f830112610e1257600080fd5b8135610e25610e2082610dd9565b610da8565b818152846020838601011115610e3a57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610e6857600080fd5b6040516080810181811067ffffffffffffffff82111715610e8b57610e8b610d68565b604052806080840185811115610ea057600080fd5b845b81811015610eba578035835260209283019201610ea2565b509195945050505050565b600082601f830112610ed657600080fd5b6040516060810181811067ffffffffffffffff82111715610ef957610ef9610d68565b604052806060840185811115610ea057600080fd5b600060208284031215610f2057600080fd5b813567ffffffffffffffff80821115610f3857600080fd5b908301906102208286031215610f4d57600080fd5b610f55610d7e565b823582811115610f6457600080fd5b610f7087828601610e01565b825250610f7f60208401610be3565b6020820152610f9060408401610be3565b6040820152606083013560608201526080830135608082015260a083013582811115610fbb57600080fd5b610fc787828601610e01565b60a08301525060c083013582811115610fdf57600080fd5b610feb87828601610e01565b60c08301525060e083013560e0820152610100915061100c86838501610e57565b8282015261101e866101808501610ec5565b6101208201526101e083013561014082015261020090920135610160830152509392505050565b60005b83811015611060578181015183820152602001611048565b50506000910152565b6000835161107b818460208801611045565b83519083019061108f818360208801611045565b01949350505050565b600081518084526110b0816020860160208601611045565b601f01601f19169290920160200192915050565b8060005b60038110156110e75781518452602093840193909101906001016110c8565b50505050565b6001600160a01b038b811682526101e06020808401829052600092906111158584018f611098565b9250818d1660408601528483036060860152611131838d611098565b92508483036080860152611145838c611098565b9350818a1660a086015260c08501925088915060005b60048110156111785782518452928101929181019160010161115b565b50505050846101408301526111916101608301856110c4565b6001600160a01b0383166101c08301529b9a5050505050505050505050565b6000602082840312156111c257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561036f5761036f6111c9565b60006020828403121561120457600080fd5b815161120f81610bcb565b9392505050565b6040815260006112296040830185611098565b828103602084015261123b8185611098565b95945050505050565b60006020828403121561125657600080fd5b813567ffffffffffffffff8082111561126e57600080fd5b908301906020828603121561128257600080fd5b60405160208101818110838211171561129d5761129d610d68565b6040528235828111156112af57600080fd5b6112bb87828601610e01565b82525095945050505050565b60208152600061120f6020830184611098565b600082516112ec818460208701611045565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b8381526001600160a01b0383166020820152606081016005831061134057634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b60006020828403121561136057600080fd5b815167ffffffffffffffff81111561137757600080fd5b8201601f8101841361138857600080fd5b8051611396610e2082610dd9565b8181528560208385010111156113ab57600080fd5b61123b826020830160208601611045565b8082018082111561036f5761036f6111c9565b6000604082840312156113e157600080fd5b6040516040810181811067ffffffffffffffff8211171561140457611404610d68565b60405282516005811061141657600080fd5b8152602092830151928101929092525091905056fea2646970667358221220ff362a8a688334ccb246ddd5eca61fc99c782fd24724aa6f6102d97c3c94a69964736f6c63430008110033";

type KlerosBadgeTypeControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KlerosBadgeTypeControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KlerosBadgeTypeController__factory extends ContractFactory {
  constructor(...args: KlerosBadgeTypeControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _theBadge: PromiseOrValue<string>,
    _arbitrator: PromiseOrValue<string>,
    _tcrFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KlerosBadgeTypeController> {
    return super.deploy(
      _theBadge,
      _arbitrator,
      _tcrFactory,
      overrides || {}
    ) as Promise<KlerosBadgeTypeController>;
  }
  override getDeployTransaction(
    _theBadge: PromiseOrValue<string>,
    _arbitrator: PromiseOrValue<string>,
    _tcrFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _theBadge,
      _arbitrator,
      _tcrFactory,
      overrides || {}
    );
  }
  override attach(address: string): KlerosBadgeTypeController {
    return super.attach(address) as KlerosBadgeTypeController;
  }
  override connect(signer: Signer): KlerosBadgeTypeController__factory {
    return super.connect(signer) as KlerosBadgeTypeController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KlerosBadgeTypeControllerInterface {
    return new utils.Interface(_abi) as KlerosBadgeTypeControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KlerosBadgeTypeController {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as KlerosBadgeTypeController;
  }
}
