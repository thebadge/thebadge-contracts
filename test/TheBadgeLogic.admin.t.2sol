// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

import "forge-std/Test.sol";

import { Config, TheBadgeLogic } from "./utils/Config.sol";

contract TheBadgeTestAdmin is Config {
  // Test updateAddresses method by calling it from an account that is not an admin and
  // verifying that the call is reverted.
  // function test_updateProtocolValues_notAdmin() public {
  //     vm.prank(vegeta);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__onlyAdmin_senderIsNotAdmin.selector);
  //     theBadge.updateProtocolValues(0, 0, 0, 0);
  // }
  // // Test updateAddresses method by calling it as the admin with address zero and
  // // verifying that the call is reverted with a proper error.
  // function test_updateAddresses_invalidAddress() public {
  //     vm.prank(admin);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__updateAddresses_paramAddressesCanNotBeZero.selector);
  //     theBadge.updateAddresses(address(0), address(0));
  // }
  // // Test updateAddresses method by calling it as the admin with address different than zero and
  // // verifying that the addresses are updated properly
  // function test_updateAddresses_shouldWork() public {
  //     vm.prank(admin);
  //     theBadge.updateAddresses(address(1), address(2));
  //     assertEq(theBadge.admin(), address(1));
  //     assertEq(theBadge.feeCollector(), address(2));
  // }
  // // Test updateFees method by calling it from an account that is not an admin and
  // // verifying that the call is reverted.
  // function test_updateFees_notAdmin() public {
  //     vm.prank(vegeta);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__onlyAdmin_senderIsNotAdmin.selector);
  //     theBadge.updateValues(0, 0, 0, 0);
  // }
  // // Test updateFees method by calling it as the admin with address different than zero and
  // // verifying that the addresses are updated properly
  // function test_updateFees_shouldWork() public {
  //     vm.prank(admin);
  //     theBadge.updateValues(1, 2, 3, 4);
  //     assertEq(theBadge.mintBadgeDefaultFee(), 1);
  //     assertEq(theBadge.minBadgeMintValue(), 2);
  //     assertEq(theBadge.createBadgeTypeValue(), 3);
  //     assertEq(theBadge.registerEmitterValue(), 4);
  // }
  // // Test setBadgeTypeController method by calling it from a non admin address and
  // // verifying that reverts
  // function test_setBadgeTypeController_notAdmin() public {
  //     vm.prank(vegeta);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__onlyAdmin_senderIsNotAdmin.selector);
  //     theBadge.setBadgeTypeController("test", address(1));
  // }
  // // Test setBadgeTypeController method by calling it from an admin address and
  // // verifying that reverts if controller address is 0.
  // function test_setBadgeTypeController_zeroAddress() public {
  //     vm.prank(admin);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__setBadgeTypeController_notFound.selector);
  //     theBadge.setBadgeTypeController("test", address(0));
  // }
  // // Test setBadgeTypeController method by calling it from an admin address and
  // // verifying that reverts if controller address is 0.
  // function test_setBadgeTypeController_emptyName() public {
  //     vm.prank(admin);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__setBadgeTypeController_emptyName.selector);
  //     theBadge.setBadgeTypeController("", address(1));
  // }
  // // Test setBadgeTypeController method by calling it from an admin address and
  // // verifying that reverts if the controller name is already set
  // function test_setBadgeTypeController_alreadySet() public {
  //     vm.prank(admin);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__setBadgeTypeController_alreadySet.selector);
  //     theBadge.setBadgeTypeController("kleros", address(2));
  // }
  // // Test setBadgeTypeController method by calling it from an admin address and
  // // verifying that the controller is set
  // function test_setBadgeTypeController_shouldWork() public {
  //     vm.prank(admin);
  //     theBadge.setBadgeTypeController("test", address(5));
  //     (address controller, ) = theBadge.badgeTypeController("test");
  //     assertEq(controller, address(5));
  // }
  // // Test setControllerStatus method by calling it from an non admin address and
  // // verifying that the call reverts
  // function test_setControllerStatus_notAdmin() public {
  //     vm.prank(vegeta);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__onlyAdmin_senderIsNotAdmin.selector);
  //     theBadge.setControllerStatus("test", false);
  // }
  // // Test setControllerStatus method by calling it from an admin address and
  // // but with an nonexisting controller should revert
  // function test_setControllerStatus_notFound() public {
  //     vm.prank(vegeta);
  //     vm.expectRevert(TheBadgeLogic.TheBadge__onlyAdmin_senderIsNotAdmin.selector);
  //     theBadge.setControllerStatus("test", false);
  // }
  // // Test setControllerStatus method by calling it from an admin address should work
  // function test_setControllerStatus_shouldWork() public {
  //     (, bool oldStatus) = theBadge.badgeTypeController("kleros");
  //     vm.prank(admin);
  //     theBadge.setControllerStatus("kleros", true);
  //     (, bool newStatus) = theBadge.badgeTypeController("kleros");
  //     assertEq(oldStatus, false);
  //     assertEq(newStatus, true);
  // }
}
