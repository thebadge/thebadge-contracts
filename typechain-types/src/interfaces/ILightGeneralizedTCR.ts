/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ILightGeneralizedTCRInterface extends utils.Interface {
  functions: {
    "addItem(string)": FunctionFragment;
    "arbitratorExtraData()": FunctionFragment;
    "challengePeriodDuration()": FunctionFragment;
    "executeRequest(bytes32)": FunctionFragment;
    "getItemInfo(bytes32)": FunctionFragment;
    "submissionBaseDeposit()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addItem"
      | "arbitratorExtraData"
      | "challengePeriodDuration"
      | "executeRequest"
      | "getItemInfo"
      | "submissionBaseDeposit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addItem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorExtraData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submissionBaseDeposit",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionBaseDeposit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILightGeneralizedTCR extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILightGeneralizedTCRInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addItem(
      _item: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbitratorExtraData(overrides?: CallOverrides): Promise<[string]>;

    challengePeriodDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRequest(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getItemInfo(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        status: number;
        numberOfRequests: BigNumber;
        sumDeposit: BigNumber;
      }
    >;

    submissionBaseDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addItem(
    _item: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbitratorExtraData(overrides?: CallOverrides): Promise<string>;

  challengePeriodDuration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRequest(
    _itemID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getItemInfo(
    _itemID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      status: number;
      numberOfRequests: BigNumber;
      sumDeposit: BigNumber;
    }
  >;

  submissionBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addItem(
      _item: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    arbitratorExtraData(overrides?: CallOverrides): Promise<string>;

    challengePeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    executeRequest(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getItemInfo(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        status: number;
        numberOfRequests: BigNumber;
        sumDeposit: BigNumber;
      }
    >;

    submissionBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addItem(
      _item: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbitratorExtraData(overrides?: CallOverrides): Promise<BigNumber>;

    challengePeriodDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRequest(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getItemInfo(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submissionBaseDeposit(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addItem(
      _item: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbitratorExtraData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengePeriodDuration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRequest(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getItemInfo(
      _itemID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submissionBaseDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
