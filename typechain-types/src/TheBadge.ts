/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace TheBadge {
  export type CreateBadgeTypeStruct = {
    metadata: PromiseOrValue<string>;
    controllerName: PromiseOrValue<string>;
    mintCost: PromiseOrValue<BigNumberish>;
    mintFee: PromiseOrValue<BigNumberish>;
    validFor: PromiseOrValue<BigNumberish>;
  };

  export type CreateBadgeTypeStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    metadata: string;
    controllerName: string;
    mintCost: BigNumber;
    mintFee: BigNumber;
    validFor: BigNumber;
  };
}

export interface TheBadgeInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "badge(uint256,address)": FunctionFragment;
    "badgeIds()": FunctionFragment;
    "badgeRequestValue(uint256)": FunctionFragment;
    "badgeType(uint256)": FunctionFragment;
    "badgeTypeController(string)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "collectFees()": FunctionFragment;
    "createBadgeType((string,string,uint256,uint256,uint256),bytes)": FunctionFragment;
    "createBadgeTypeValue()": FunctionFragment;
    "emitters(address)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "minBadgeMintValue()": FunctionFragment;
    "mintBadgeDefaultFee()": FunctionFragment;
    "registerEmitter(address,string)": FunctionFragment;
    "registerEmitterValue()": FunctionFragment;
    "requestBadge(uint256,address,bytes)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBadgeTypeController(string,address)": FunctionFragment;
    "setControllerStatus(string,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateAddresses(address,address)": FunctionFragment;
    "updateBadgeStatus(uint256,address,uint8)": FunctionFragment;
    "updateBadgeType(uint256,uint256,uint256,bool)": FunctionFragment;
    "updateBadgeTypeFee(uint256,uint256)": FunctionFragment;
    "updateEmitter(address,string)": FunctionFragment;
    "updateValues(uint256,uint256,uint256,uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "badge"
      | "badgeIds"
      | "badgeRequestValue"
      | "badgeType"
      | "badgeTypeController"
      | "balanceOf"
      | "balanceOfBatch"
      | "collectFees"
      | "createBadgeType"
      | "createBadgeTypeValue"
      | "emitters"
      | "feeCollector"
      | "isApprovedForAll"
      | "minBadgeMintValue"
      | "mintBadgeDefaultFee"
      | "registerEmitter"
      | "registerEmitterValue"
      | "requestBadge"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setBadgeTypeController"
      | "setControllerStatus"
      | "supportsInterface"
      | "updateAddresses"
      | "updateBadgeStatus"
      | "updateBadgeType"
      | "updateBadgeTypeFee"
      | "updateEmitter"
      | "updateValues"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "badge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "badgeIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "badgeRequestValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "badgeType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "badgeTypeController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBadgeType",
    values: [TheBadge.CreateBadgeTypeStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBadgeTypeValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minBadgeMintValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBadgeDefaultFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerEmitter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEmitterValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestBadge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeTypeController",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBadgeStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBadgeType",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBadgeTypeFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmitter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValues",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "badge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "badgeIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "badgeRequestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "badgeType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "badgeTypeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBadgeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBadgeTypeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBadgeMintValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBadgeDefaultFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEmitterValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeTypeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBadgeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBadgeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBadgeTypeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BadgeStatusUpdated(uint256,address,uint8)": EventFragment;
    "BadgeTypeCreated(address,uint256,string)": EventFragment;
    "EmitterRegistered(address,address,string)": EventFragment;
    "EmitterUpdated(address,string)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BadgeStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BadgeTypeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmitterRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmitterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BadgeStatusUpdatedEventObject {
  badgeId: BigNumber;
  badgeOwner: string;
  status: number;
}
export type BadgeStatusUpdatedEvent = TypedEvent<
  [BigNumber, string, number],
  BadgeStatusUpdatedEventObject
>;

export type BadgeStatusUpdatedEventFilter =
  TypedEventFilter<BadgeStatusUpdatedEvent>;

export interface BadgeTypeCreatedEventObject {
  creator: string;
  badgeId: BigNumber;
  metadata: string;
}
export type BadgeTypeCreatedEvent = TypedEvent<
  [string, BigNumber, string],
  BadgeTypeCreatedEventObject
>;

export type BadgeTypeCreatedEventFilter =
  TypedEventFilter<BadgeTypeCreatedEvent>;

export interface EmitterRegisteredEventObject {
  emitter: string;
  registrant: string;
  metadata: string;
}
export type EmitterRegisteredEvent = TypedEvent<
  [string, string, string],
  EmitterRegisteredEventObject
>;

export type EmitterRegisteredEventFilter =
  TypedEventFilter<EmitterRegisteredEvent>;

export interface EmitterUpdatedEventObject {
  emitter: string;
  metadata: string;
}
export type EmitterUpdatedEvent = TypedEvent<
  [string, string],
  EmitterUpdatedEventObject
>;

export type EmitterUpdatedEventFilter = TypedEventFilter<EmitterUpdatedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface TheBadge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TheBadgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    badge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { status: number; dueDate: BigNumber }>;

    badgeIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    badgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber, BigNumber] & {
        emitter: string;
        controllerName: string;
        paused: boolean;
        mintCost: BigNumber;
        mintFee: BigNumber;
        validFor: BigNumber;
      }
    >;

    badgeTypeController(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { controller: string; paused: boolean }>;

    balanceOf(
      account: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBadgeType(
      args: TheBadge.CreateBadgeTypeStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBadgeTypeValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    emitters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { metadata: string }>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minBadgeMintValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintBadgeDefaultFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEmitterValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBadgeTypeController(
      _name: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setControllerStatus(
      _name: PromiseOrValue<string>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateAddresses(
      _admin: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBadgeStatus(
      badgeId: PromiseOrValue<BigNumberish>,
      badgeOwner: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      mintCost: PromiseOrValue<BigNumberish>,
      validFor: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBadgeTypeFee(
      badgeId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateValues(
      _mintBadgeDefaultFee: PromiseOrValue<BigNumberish>,
      _minBadgeMintValue: PromiseOrValue<BigNumberish>,
      _createBadgeTypeValue: PromiseOrValue<BigNumberish>,
      _registerEmitterValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  badge(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { status: number; dueDate: BigNumber }>;

  badgeIds(overrides?: CallOverrides): Promise<BigNumber>;

  badgeRequestValue(
    badgeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  badgeType(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber, BigNumber, BigNumber] & {
      emitter: string;
      controllerName: string;
      paused: boolean;
      mintCost: BigNumber;
      mintFee: BigNumber;
      validFor: BigNumber;
    }
  >;

  badgeTypeController(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { controller: string; paused: boolean }>;

  balanceOf(
    account: PromiseOrValue<string>,
    badgeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  collectFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBadgeType(
    args: TheBadge.CreateBadgeTypeStruct,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBadgeTypeValue(overrides?: CallOverrides): Promise<BigNumber>;

  emitters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minBadgeMintValue(overrides?: CallOverrides): Promise<BigNumber>;

  mintBadgeDefaultFee(overrides?: CallOverrides): Promise<BigNumber>;

  registerEmitter(
    _emitter: PromiseOrValue<string>,
    _metadata: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEmitterValue(overrides?: CallOverrides): Promise<BigNumber>;

  requestBadge(
    badgeId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBadgeTypeController(
    _name: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setControllerStatus(
    _name: PromiseOrValue<string>,
    isPaused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAddresses(
    _admin: PromiseOrValue<string>,
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBadgeStatus(
    badgeId: PromiseOrValue<BigNumberish>,
    badgeOwner: PromiseOrValue<string>,
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBadgeType(
    badgeId: PromiseOrValue<BigNumberish>,
    mintCost: PromiseOrValue<BigNumberish>,
    validFor: PromiseOrValue<BigNumberish>,
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBadgeTypeFee(
    badgeId: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEmitter(
    _emitter: PromiseOrValue<string>,
    _metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateValues(
    _mintBadgeDefaultFee: PromiseOrValue<BigNumberish>,
    _minBadgeMintValue: PromiseOrValue<BigNumberish>,
    _createBadgeTypeValue: PromiseOrValue<BigNumberish>,
    _registerEmitterValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    badge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { status: number; dueDate: BigNumber }>;

    badgeIds(overrides?: CallOverrides): Promise<BigNumber>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    badgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber, BigNumber] & {
        emitter: string;
        controllerName: string;
        paused: boolean;
        mintCost: BigNumber;
        mintFee: BigNumber;
        validFor: BigNumber;
      }
    >;

    badgeTypeController(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { controller: string; paused: boolean }>;

    balanceOf(
      account: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    collectFees(overrides?: CallOverrides): Promise<void>;

    createBadgeType(
      args: TheBadge.CreateBadgeTypeStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createBadgeTypeValue(overrides?: CallOverrides): Promise<BigNumber>;

    emitters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minBadgeMintValue(overrides?: CallOverrides): Promise<BigNumber>;

    mintBadgeDefaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerEmitterValue(overrides?: CallOverrides): Promise<BigNumber>;

    requestBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBadgeTypeController(
      _name: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setControllerStatus(
      _name: PromiseOrValue<string>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAddresses(
      _admin: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBadgeStatus(
      badgeId: PromiseOrValue<BigNumberish>,
      badgeOwner: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      mintCost: PromiseOrValue<BigNumberish>,
      validFor: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBadgeTypeFee(
      badgeId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateValues(
      _mintBadgeDefaultFee: PromiseOrValue<BigNumberish>,
      _minBadgeMintValue: PromiseOrValue<BigNumberish>,
      _createBadgeTypeValue: PromiseOrValue<BigNumberish>,
      _registerEmitterValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BadgeStatusUpdated(uint256,address,uint8)"(
      badgeId?: PromiseOrValue<BigNumberish> | null,
      badgeOwner?: PromiseOrValue<string> | null,
      status?: null
    ): BadgeStatusUpdatedEventFilter;
    BadgeStatusUpdated(
      badgeId?: PromiseOrValue<BigNumberish> | null,
      badgeOwner?: PromiseOrValue<string> | null,
      status?: null
    ): BadgeStatusUpdatedEventFilter;

    "BadgeTypeCreated(address,uint256,string)"(
      creator?: null,
      badgeId?: null,
      metadata?: null
    ): BadgeTypeCreatedEventFilter;
    BadgeTypeCreated(
      creator?: null,
      badgeId?: null,
      metadata?: null
    ): BadgeTypeCreatedEventFilter;

    "EmitterRegistered(address,address,string)"(
      emitter?: PromiseOrValue<string> | null,
      registrant?: PromiseOrValue<string> | null,
      metadata?: null
    ): EmitterRegisteredEventFilter;
    EmitterRegistered(
      emitter?: PromiseOrValue<string> | null,
      registrant?: PromiseOrValue<string> | null,
      metadata?: null
    ): EmitterRegisteredEventFilter;

    "EmitterUpdated(address,string)"(
      emitter?: PromiseOrValue<string> | null,
      metadata?: null
    ): EmitterUpdatedEventFilter;
    EmitterUpdated(
      emitter?: PromiseOrValue<string> | null,
      metadata?: null
    ): EmitterUpdatedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    badge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    badgeIds(overrides?: CallOverrides): Promise<BigNumber>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    badgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    badgeTypeController(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBadgeType(
      args: TheBadge.CreateBadgeTypeStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBadgeTypeValue(overrides?: CallOverrides): Promise<BigNumber>;

    emitters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBadgeMintValue(overrides?: CallOverrides): Promise<BigNumber>;

    mintBadgeDefaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    registerEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEmitterValue(overrides?: CallOverrides): Promise<BigNumber>;

    requestBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBadgeTypeController(
      _name: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setControllerStatus(
      _name: PromiseOrValue<string>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAddresses(
      _admin: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBadgeStatus(
      badgeId: PromiseOrValue<BigNumberish>,
      badgeOwner: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      mintCost: PromiseOrValue<BigNumberish>,
      validFor: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBadgeTypeFee(
      badgeId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateValues(
      _mintBadgeDefaultFee: PromiseOrValue<BigNumberish>,
      _minBadgeMintValue: PromiseOrValue<BigNumberish>,
      _createBadgeTypeValue: PromiseOrValue<BigNumberish>,
      _registerEmitterValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    badgeIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    badgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    badgeTypeController(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBadgeType(
      args: TheBadge.CreateBadgeTypeStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBadgeTypeValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBadgeMintValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBadgeDefaultFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEmitterValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBadgeTypeController(
      _name: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setControllerStatus(
      _name: PromiseOrValue<string>,
      isPaused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAddresses(
      _admin: PromiseOrValue<string>,
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBadgeStatus(
      badgeId: PromiseOrValue<BigNumberish>,
      badgeOwner: PromiseOrValue<string>,
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      mintCost: PromiseOrValue<BigNumberish>,
      validFor: PromiseOrValue<BigNumberish>,
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBadgeTypeFee(
      badgeId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEmitter(
      _emitter: PromiseOrValue<string>,
      _metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateValues(
      _mintBadgeDefaultFee: PromiseOrValue<BigNumberish>,
      _minBadgeMintValue: PromiseOrValue<BigNumberish>,
      _createBadgeTypeValue: PromiseOrValue<BigNumberish>,
      _registerEmitterValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
