/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  KlerosBadgeTypeControllerV2,
  KlerosBadgeTypeControllerV2Interface,
} from "../../../../src/badgeTypeControllers/klerosV2.sol/KlerosBadgeTypeControllerV2";

const _abi = [
  {
    inputs: [],
    name: "KlerosBadgeTypeController__claimBadge_insufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_TCRListAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_badgeTypeAlreadyCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_alreadyMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_isPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongBadgeType",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongValue",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__onlyTheBadge_senderNotTheBadge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "badgeTypeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "evidence",
        type: "string",
      },
    ],
    name: "MintKlerosBadge",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "klerosTCRAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "registrationMetadata",
        type: "string",
      },
    ],
    name: "NewKlerosStrategy",
    type: "event",
  },
  {
    inputs: [],
    name: "arbitrator",
    outputs: [
      {
        internalType: "contract IArbitrator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
    ],
    name: "badgeRequestValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "canRequestBadge",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "claimBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "createBadgeType",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_theBadge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_arbitrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tcrFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "klerosBadge",
    outputs: [
      {
        internalType: "bytes32",
        name: "itemID",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "klerosBadgeType",
    outputs: [
      {
        internalType: "address",
        name: "tcrList",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "requestBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tcrFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "theBadge",
    outputs: [
      {
        internalType: "contract ITheBadge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type KlerosBadgeTypeControllerV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KlerosBadgeTypeControllerV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KlerosBadgeTypeControllerV2__factory extends ContractFactory {
  constructor(...args: KlerosBadgeTypeControllerV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KlerosBadgeTypeControllerV2> {
    return super.deploy(
      overrides || {}
    ) as Promise<KlerosBadgeTypeControllerV2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): KlerosBadgeTypeControllerV2 {
    return super.attach(address) as KlerosBadgeTypeControllerV2;
  }
  override connect(signer: Signer): KlerosBadgeTypeControllerV2__factory {
    return super.connect(signer) as KlerosBadgeTypeControllerV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KlerosBadgeTypeControllerV2Interface {
    return new utils.Interface(_abi) as KlerosBadgeTypeControllerV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KlerosBadgeTypeControllerV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as KlerosBadgeTypeControllerV2;
  }
}
