/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  KlerosBadgeTypeController,
  KlerosBadgeTypeControllerInterface,
} from "../../../../src/badgeTypeControllers/kleros.sol/KlerosBadgeTypeController";

const _abi = [
  {
    inputs: [],
    name: "KlerosBadgeTypeController__claimBadge_insufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_TCRListAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_badgeTypeAlreadyCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_alreadyMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_isPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongBadgeType",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongValue",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__onlyTheBadge_senderNotTheBadge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "badgeTypeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "evidence",
        type: "string",
      },
    ],
    name: "MintKlerosBadge",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "klerosTCRAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "registrationMetadata",
        type: "string",
      },
    ],
    name: "NewKlerosStrategy",
    type: "event",
  },
  {
    inputs: [],
    name: "arbitrator",
    outputs: [
      {
        internalType: "contract IArbitrator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
    ],
    name: "badgeRequestValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "canRequestBadge",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "claimBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "createBadgeType",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_theBadge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_arbitrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tcrFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "klerosBadge",
    outputs: [
      {
        internalType: "bytes32",
        name: "itemID",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "klerosBadgeType",
    outputs: [
      {
        internalType: "address",
        name: "tcrList",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "requestBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tcrFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "theBadge",
    outputs: [
      {
        internalType: "contract ITheBadge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611608806100206000396000f3fe6080604052600436106100ab5760003560e01c8063b42f3ba111610064578063b42f3ba114610200578063c0c53b8b14610213578063c833b0a914610233578063caa39ec514610246578063e677413b1461026c578063eccc52e31461028c57600080fd5b80631f212590146100b75780633656eec21461010a5780636cc6cde11461013857806383a1be0a146101585780639e516bd11461016d5780639f780b1d146101e057600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100ed6100d2366004610d78565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011657600080fd5b5061012a610125366004610db9565b6102bc565b604051908152602001610101565b34801561014457600080fd5b506001546100ed906001600160a01b031681565b61016b610166366004610e32565b6103a6565b005b34801561017957600080fd5b506101bd610188366004610db9565b600460209081526000928352604080842090915290825290208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b03909216602084015290820152606001610101565b3480156101ec57600080fd5b506002546100ed906001600160a01b031681565b61016b61020e366004610e7e565b6106ac565b34801561021f57600080fd5b5061016b61022e366004610ef1565b610845565b61016b610241366004610db9565b6109a6565b34801561025257600080fd5b506000546100ed906201000090046001600160a01b031681565b34801561027857600080fd5b5061012a610287366004610d78565b610b11565b34801561029857600080fd5b506102ac6102a7366004610db9565b610c7a565b6040519015158152602001610101565b6000828152600360209081526040808320600483528184206001600160a01b038087168652935290832081549192909116156103995781548154604051634aac84e560e01b81526001600160a01b03909216916000918391634aac84e59161032a9160040190815260200190565b606060405180830381865afa158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610f3c565b505090508060ff166001148061038457508060ff166003145b156103965760019450505050506103a0565b50505b6000925050505b92915050565b6000546201000090046001600160a01b031633146103d75760405163653dd30360e11b815260040160405180910390fd5b600083815260036020526040902080546001600160a01b03161561040e57604051638c495fd560e01b815260040160405180910390fd5b6002546001600160a01b031660006104288486018661111f565b60015460408083015190519293506001600160a01b038086169363d8dcbd27939091169161045c9160200190815260200190565b60408051601f1981840301815282825260608701516020840152910160408051601f1981840301815290829052610496929160200161123b565b60408051808303601f1901815290829052608086015160a0870151875160e0808a015160c08b01516101008c015160208d0151938b901b6001600160e01b03191689526104ed9998600097969594906004016112b9565b600060405180830381600087803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b5050505060006001836001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061137c565b61058f91906113ab565b60405163a2f7b3a560e01b8152600481018290529091506000906001600160a01b0385169063a2f7b3a5906024016020604051808303816000875af11580156105dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060091906113be565b90506001600160a01b0381166106295760405163f4864ae560e01b815260040160405180910390fd5b60408051602080820183526001600160a01b0384811680845260008d8152600390935291849020925183546001600160a01b0319169116179091556080850151915190918a917f4974a28236fb408a23b476af1c6421fbce625584731e7402e88fb4256a508ded9161069a916113e2565b60405180910390a35050505050505050565b60006106b785610b11565b90508034146106d95760405163361e7e3b60e21b815260040160405180910390fd5b6000858152600360205260408120805490916001600160a01b0390911690610703858701876113f5565b80516040516309fa7ca560e21b81529192506001600160a01b038416916327e9f29491349161073591906004016113e2565b6000604051808303818588803b15801561074e57600080fd5b505af1158015610762573d6000803e3d6000fd5b5050505050604051806060016040528082600001516040516020016107879190611478565b60408051808303601f19018152918152815160209283012083526001600160a01b038d8116848401819052349483019490945260008d8152600484528281208d83168083529085529083902086518155938601516001850180546001600160a01b031916919093161790915593810151600290920191909155835190518b92917e5f9a2814a1b2f0b782939610bff263042d3460b58e0663e1b1705e8aad48919161083291906113e2565b60405180910390a4505050505050505050565b600054610100900460ff16158080156108655750600054600160ff909116105b8061087f5750303b15801561087f575060005460ff166001145b6108e65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015610909576000805461ff0019166101001790555b600080546001600160a01b03808716620100000262010000600160b01b031990921691909117909155600180548583166001600160a01b031991821617909155600280549285169290911691909117905580156109a0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600082815260036020908152604080832060048084528285206001600160a01b0380881687529452938290208154815493516374e120b360e11b8152929591941692839263e9c24166926109ff92910190815260200190565b600060405180830381600087803b158015610a1957600080fd5b505af1158015610a2d573d6000803e3d6000fd5b5050600054604051635695430160e01b8152620100009091046001600160a01b0316925063569543019150610a6b90889088906002906004016114aa565b600060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b505050504782600201541115610ac2576040516303854c6760e41b815260040160405180910390fd5b600182015460028301546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610b02573d6000803e3d6000fd5b50506000600290910155505050565b6000818152600360205260408082208054600154835163063d63db60e11b8152935192936001600160a01b039283169386939092169163f7434ea9918591630c7ac7b69160048082019288929091908290030181865afa158015610b79573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ba191908101906114ec565b6040518263ffffffff1660e01b8152600401610bbd91906113e2565b602060405180830381865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe919061137c565b90506000826001600160a01b031663bb0b86ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c64919061137c565b9050610c708183611563565b9695505050505050565b60008054604051633cc5d99960e21b8152600481018590526001600160a01b0384811660248301528392620100009004169063f3176664906044016040805180830381865afa158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf59190611576565b905080602001516000148015610d395750600181516004811115610d1b57610d1b611494565b1480610d395750600281516004811115610d3757610d37611494565b145b15610d485760009150506103a0565b60008160200151118015610d5f5750806020015142105b15610d6e5760009150506103a0565b5060019392505050565b600060208284031215610d8a57600080fd5b5035919050565b6001600160a01b0381168114610da657600080fd5b50565b8035610db481610d91565b919050565b60008060408385031215610dcc57600080fd5b823591506020830135610dde81610d91565b809150509250929050565b60008083601f840112610dfb57600080fd5b50813567ffffffffffffffff811115610e1357600080fd5b602083019150836020828501011115610e2b57600080fd5b9250929050565b600080600060408486031215610e4757600080fd5b83359250602084013567ffffffffffffffff811115610e6557600080fd5b610e7186828701610de9565b9497909650939450505050565b600080600080600060808688031215610e9657600080fd5b8535610ea181610d91565b9450602086013593506040860135610eb881610d91565b9250606086013567ffffffffffffffff811115610ed457600080fd5b610ee088828901610de9565b969995985093965092949392505050565b600080600060608486031215610f0657600080fd5b8335610f1181610d91565b92506020840135610f2181610d91565b91506040840135610f3181610d91565b809150509250925092565b600080600060608486031215610f5157600080fd5b835160ff81168114610f6257600080fd5b602085015160409095015190969495509392505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610fb357610fb3610f79565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610fe257610fe2610f79565b604052919050565b600067ffffffffffffffff82111561100457611004610f79565b50601f01601f191660200190565b600082601f83011261102357600080fd5b813561103661103182610fea565b610fb9565b81815284602083860101111561104b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261107957600080fd5b6040516080810181811067ffffffffffffffff8211171561109c5761109c610f79565b6040528060808401858111156110b157600080fd5b845b818110156110cb5780358352602092830192016110b3565b509195945050505050565b600082601f8301126110e757600080fd5b6040516060810181811067ffffffffffffffff8211171561110a5761110a610f79565b6040528060608401858111156110b157600080fd5b60006020828403121561113157600080fd5b813567ffffffffffffffff8082111561114957600080fd5b908301906101c0828603121561115e57600080fd5b611166610f8f565b61116f83610da9565b815261117d60208401610da9565b602082015260408301356040820152606083013560608201526080830135828111156111a857600080fd5b6111b487828601611012565b60808301525060a0830135828111156111cc57600080fd5b6111d887828601611012565b60a08301525060c083013560c08201526111f58660e08501611068565b60e08201526112088661016085016110d6565b61010082015295945050505050565b60005b8381101561123257818101518382015260200161121a565b50506000910152565b6000835161124d818460208801611217565b835190830190611261818360208801611217565b01949350505050565b60008151808452611282816020860160208601611217565b601f01601f19169290920160200192915050565b8060005b60038110156109a057815184526020938401939091019060010161129a565b6001600160a01b038b811682526101e06020808401829052600092906112e18584018f61126a565b9250818d16604086015284830360608601526112fd838d61126a565b92508483036080860152611311838c61126a565b9350818a1660a086015260c08501925088915060005b600481101561134457825184529281019291810191600101611327565b505050508461014083015261135d610160830185611296565b6001600160a01b0383166101c08301529b9a5050505050505050505050565b60006020828403121561138e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103a0576103a0611395565b6000602082840312156113d057600080fd5b81516113db81610d91565b9392505050565b6020815260006113db602083018461126a565b60006020828403121561140757600080fd5b813567ffffffffffffffff8082111561141f57600080fd5b908301906020828603121561143357600080fd5b60405160208101818110838211171561144e5761144e610f79565b60405282358281111561146057600080fd5b61146c87828601611012565b82525095945050505050565b6000825161148a818460208701611217565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b8381526001600160a01b038316602082015260608101600583106114de57634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b6000602082840312156114fe57600080fd5b815167ffffffffffffffff81111561151557600080fd5b8201601f8101841361152657600080fd5b805161153461103182610fea565b81815285602083850101111561154957600080fd5b61155a826020830160208601611217565b95945050505050565b808201808211156103a0576103a0611395565b60006040828403121561158857600080fd5b6040516040810181811067ffffffffffffffff821117156115ab576115ab610f79565b6040528251600581106115bd57600080fd5b8152602092830151928101929092525091905056fea2646970667358221220abfdce90bacf80da8bc74d0471648fa4224bcc50111ad4cf9a2ded543430409e64736f6c63430008110033";

type KlerosBadgeTypeControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KlerosBadgeTypeControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KlerosBadgeTypeController__factory extends ContractFactory {
  constructor(...args: KlerosBadgeTypeControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KlerosBadgeTypeController> {
    return super.deploy(overrides || {}) as Promise<KlerosBadgeTypeController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): KlerosBadgeTypeController {
    return super.attach(address) as KlerosBadgeTypeController;
  }
  override connect(signer: Signer): KlerosBadgeTypeController__factory {
    return super.connect(signer) as KlerosBadgeTypeController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KlerosBadgeTypeControllerInterface {
    return new utils.Interface(_abi) as KlerosBadgeTypeControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KlerosBadgeTypeController {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as KlerosBadgeTypeController;
  }
}
