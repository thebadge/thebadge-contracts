/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  KlerosBadgeTypeController,
  KlerosBadgeTypeControllerInterface,
} from "../../../../src/badgeTypeControllers/kleros.sol/KlerosBadgeTypeController";

const _abi = [
  {
    inputs: [],
    name: "KlerosBadgeTypeController__claimBadge_insufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_TCRListAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_badgeTypeAlreadyCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_alreadyMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_isPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongBadgeType",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongValue",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__onlyTheBadge_senderNotTheBadge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "badgeTypeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "evidence",
        type: "string",
      },
    ],
    name: "MintKlerosBadge",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "klerosTCRAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "registrationMetadata",
        type: "string",
      },
    ],
    name: "NewKlerosStrategy",
    type: "event",
  },
  {
    inputs: [],
    name: "arbitrator",
    outputs: [
      {
        internalType: "contract IArbitrator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
    ],
    name: "badgeRequestValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "canRequestBadge",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "claimBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "createBadgeType",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_theBadge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_arbitrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tcrFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "klerosBadge",
    outputs: [
      {
        internalType: "bytes32",
        name: "itemID",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "klerosBadgeType",
    outputs: [
      {
        internalType: "address",
        name: "tcrList",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "requestBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tcrFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "theBadge",
    outputs: [
      {
        internalType: "contract ITheBadge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611643806100206000396000f3fe6080604052600436106100ab5760003560e01c8063b42f3ba111610064578063b42f3ba114610200578063c0c53b8b14610213578063c833b0a914610233578063caa39ec514610246578063e677413b1461026c578063eccc52e31461028c57600080fd5b80631f212590146100b75780633656eec21461010a5780636cc6cde11461013857806383a1be0a146101585780639e516bd11461016d5780639f780b1d146101e057600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100ed6100d2366004610d4f565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011657600080fd5b5061012a610125366004610d90565b6102bc565b604051908152602001610101565b34801561014457600080fd5b506001546100ed906001600160a01b031681565b61016b610166366004610e09565b6103a6565b005b34801561017957600080fd5b506101bd610188366004610d90565b600460209081526000928352604080842090915290825290208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b03909216602084015290820152606001610101565b3480156101ec57600080fd5b506002546100ed906001600160a01b031681565b61016b61020e366004610e55565b610683565b34801561021f57600080fd5b5061016b61022e366004610ec8565b61081c565b61016b610241366004610d90565b61097d565b34801561025257600080fd5b506000546100ed906201000090046001600160a01b031681565b34801561027857600080fd5b5061012a610287366004610d4f565b610ae8565b34801561029857600080fd5b506102ac6102a7366004610d90565b610c51565b6040519015158152602001610101565b6000828152600360209081526040808320600483528184206001600160a01b038087168652935290832081549192909116156103995781548154604051634aac84e560e01b81526001600160a01b03909216916000918391634aac84e59161032a9160040190815260200190565b606060405180830381865afa158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610f13565b505090508060ff166001148061038457508060ff166003145b156103965760019450505050506103a0565b50505b6000925050505b92915050565b600083815260036020526040902080546001600160a01b0316156103dd57604051638c495fd560e01b815260040160405180910390fd5b6002546001600160a01b031660006103f7848601866110f6565b60015460608201516040519293506001600160a01b038086169363d8dcbd27939091169161042b9160200190815260200190565b60408051601f1981840301815282825260808701516020840152910160408051601f19818403018152908290526104659291602001611251565b60405160208183030381529060405260008560a001518660c0015187602001518861010001518960e001518a61012001518b604001516040518b63ffffffff1660e01b81526004016104c09a999897969594939291906112cf565b600060405180830381600087803b1580156104da57600080fd5b505af11580156104ee573d6000803e3d6000fd5b5050505060006001836001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190611392565b61056291906113c1565b60405163a2f7b3a560e01b8152600481018290529091506000906001600160a01b0385169063a2f7b3a5906024016020604051808303816000875af11580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d391906113d4565b90506001600160a01b0381166105fc5760405163f4864ae560e01b815260040160405180910390fd5b60408051602080820183526001600160a01b0384811680845260008d8152600390935291849020925183546001600160a01b031916911617909155845160a0860151925191928b927ff7f466799ed46d224714e441561b597805d1b1d051632820ee9f06969c851de5926106719290916113f8565b60405180910390a35050505050505050565b600061068e85610ae8565b90508034146106b05760405163361e7e3b60e21b815260040160405180910390fd5b6000858152600360205260408120805490916001600160a01b03909116906106da85870187611426565b80516040516309fa7ca560e21b81529192506001600160a01b038416916327e9f29491349161070c91906004016114a9565b6000604051808303818588803b15801561072557600080fd5b505af1158015610739573d6000803e3d6000fd5b50505050506040518060600160405280826000015160405160200161075e91906114bc565b60408051808303601f19018152918152815160209283012083526001600160a01b038d8116848401819052349483019490945260008d8152600484528281208d83168083529085529083902086518155938601516001850180546001600160a01b031916919093161790915593810151600290920191909155835190518b92917e5f9a2814a1b2f0b782939610bff263042d3460b58e0663e1b1705e8aad48919161080991906114a9565b60405180910390a4505050505050505050565b600054610100900460ff161580801561083c5750600054600160ff909116105b806108565750303b158015610856575060005460ff166001145b6108bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156108e0576000805461ff0019166101001790555b600080546001600160a01b03808716620100000262010000600160b01b031990921691909117909155600180548583166001600160a01b03199182161790915560028054928516929091169190911790558015610977576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600082815260036020908152604080832060048084528285206001600160a01b0380881687529452938290208154815493516374e120b360e11b8152929591941692839263e9c24166926109d692910190815260200190565b600060405180830381600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b5050600054604051635695430160e01b8152620100009091046001600160a01b0316925063569543019150610a4290889088906002906004016114ee565b600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b505050504782600201541115610a99576040516303854c6760e41b815260040160405180910390fd5b600182015460028301546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610ad9573d6000803e3d6000fd5b50506000600290910155505050565b6000818152600360205260408082208054600154835163063d63db60e11b8152935192936001600160a01b039283169386939092169163f7434ea9918591630c7ac7b69160048082019288929091908290030181865afa158015610b50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b789190810190611530565b6040518263ffffffff1660e01b8152600401610b9491906114a9565b602060405180830381865afa158015610bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd59190611392565b90506000826001600160a01b031663bb0b86ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b9190611392565b9050610c47818361159e565b9695505050505050565b60008054604051633cc5d99960e21b8152600481018590526001600160a01b0384811660248301528392620100009004169063f3176664906044016040805180830381865afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc91906115b1565b905080602001516000148015610d105750600181516004811115610cf257610cf26114d8565b1480610d105750600281516004811115610d0e57610d0e6114d8565b145b15610d1f5760009150506103a0565b60008160200151118015610d365750806020015142105b15610d455760009150506103a0565b5060019392505050565b600060208284031215610d6157600080fd5b5035919050565b6001600160a01b0381168114610d7d57600080fd5b50565b8035610d8b81610d68565b919050565b60008060408385031215610da357600080fd5b823591506020830135610db581610d68565b809150509250929050565b60008083601f840112610dd257600080fd5b50813567ffffffffffffffff811115610dea57600080fd5b602083019150836020828501011115610e0257600080fd5b9250929050565b600080600060408486031215610e1e57600080fd5b83359250602084013567ffffffffffffffff811115610e3c57600080fd5b610e4886828701610dc0565b9497909650939450505050565b600080600080600060808688031215610e6d57600080fd5b8535610e7881610d68565b9450602086013593506040860135610e8f81610d68565b9250606086013567ffffffffffffffff811115610eab57600080fd5b610eb788828901610dc0565b969995985093965092949392505050565b600080600060608486031215610edd57600080fd5b8335610ee881610d68565b92506020840135610ef881610d68565b91506040840135610f0881610d68565b809150509250925092565b600080600060608486031215610f2857600080fd5b835160ff81168114610f3957600080fd5b602085015160409095015190969495509392505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715610f8a57610f8a610f50565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610fb957610fb9610f50565b604052919050565b600067ffffffffffffffff821115610fdb57610fdb610f50565b50601f01601f191660200190565b600082601f830112610ffa57600080fd5b813561100d61100882610fc1565b610f90565b81815284602083860101111561102257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261105057600080fd5b6040516080810181811067ffffffffffffffff8211171561107357611073610f50565b60405280608084018581111561108857600080fd5b845b818110156110a257803583526020928301920161108a565b509195945050505050565b600082601f8301126110be57600080fd5b6040516060810181811067ffffffffffffffff821117156110e1576110e1610f50565b60405280606084018581111561108857600080fd5b60006020828403121561110857600080fd5b813567ffffffffffffffff8082111561112057600080fd5b90830190610220828603121561113557600080fd5b61113d610f66565b82358281111561114c57600080fd5b61115887828601610fe9565b82525061116760208401610d80565b602082015261117860408401610d80565b6040820152606083013560608201526080830135608082015260a0830135828111156111a357600080fd5b6111af87828601610fe9565b60a08301525060c0830135828111156111c757600080fd5b6111d387828601610fe9565b60c08301525060e083013560e082015261010091506111f48683850161103f565b828201526112068661018085016110ad565b6101208201526101e083013561014082015261020090920135610160830152509392505050565b60005b83811015611248578181015183820152602001611230565b50506000910152565b6000835161126381846020880161122d565b83519083019061127781836020880161122d565b01949350505050565b6000815180845261129881602086016020860161122d565b601f01601f19169290920160200192915050565b8060005b60038110156109775781518452602093840193909101906001016112b0565b6001600160a01b038b811682526101e06020808401829052600092906112f78584018f611280565b9250818d1660408601528483036060860152611313838d611280565b92508483036080860152611327838c611280565b9350818a1660a086015260c08501925088915060005b600481101561135a5782518452928101929181019160010161133d565b50505050846101408301526113736101608301856112ac565b6001600160a01b0383166101c08301529b9a5050505050505050505050565b6000602082840312156113a457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103a0576103a06113ab565b6000602082840312156113e657600080fd5b81516113f181610d68565b9392505050565b60408152600061140b6040830185611280565b828103602084015261141d8185611280565b95945050505050565b60006020828403121561143857600080fd5b813567ffffffffffffffff8082111561145057600080fd5b908301906020828603121561146457600080fd5b60405160208101818110838211171561147f5761147f610f50565b60405282358281111561149157600080fd5b61149d87828601610fe9565b82525095945050505050565b6020815260006113f16020830184611280565b600082516114ce81846020870161122d565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b8381526001600160a01b0383166020820152606081016005831061152257634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b60006020828403121561154257600080fd5b815167ffffffffffffffff81111561155957600080fd5b8201601f8101841361156a57600080fd5b805161157861100882610fc1565b81815285602083850101111561158d57600080fd5b61141d82602083016020860161122d565b808201808211156103a0576103a06113ab565b6000604082840312156115c357600080fd5b6040516040810181811067ffffffffffffffff821117156115e6576115e6610f50565b6040528251600581106115f857600080fd5b8152602092830151928101929092525091905056fea26469706673582212205502b155bee0084a174468794f136393c8928f0b0e9b463806ab3b3a90da3c5f64736f6c63430008110033";

type KlerosBadgeTypeControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KlerosBadgeTypeControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KlerosBadgeTypeController__factory extends ContractFactory {
  constructor(...args: KlerosBadgeTypeControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KlerosBadgeTypeController> {
    return super.deploy(overrides || {}) as Promise<KlerosBadgeTypeController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): KlerosBadgeTypeController {
    return super.attach(address) as KlerosBadgeTypeController;
  }
  override connect(signer: Signer): KlerosBadgeTypeController__factory {
    return super.connect(signer) as KlerosBadgeTypeController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KlerosBadgeTypeControllerInterface {
    return new utils.Interface(_abi) as KlerosBadgeTypeControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KlerosBadgeTypeController {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as KlerosBadgeTypeController;
  }
}
