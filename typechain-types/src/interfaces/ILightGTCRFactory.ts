/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ILightGTCRFactoryInterface extends utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "deploy(address,bytes,address,string,string,address,uint256[4],uint256,uint256[3],address)": FunctionFragment;
    "instances(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "count" | "deploy" | "instances"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "instances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;

  events: {};
}

export interface ILightGTCRFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILightGTCRFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    deploy(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _connectedTCR: PromiseOrValue<string>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _baseDeposits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _stakeMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _relayContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    instances(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  count(overrides?: CallOverrides): Promise<BigNumber>;

  deploy(
    _arbitrator: PromiseOrValue<string>,
    _arbitratorExtraData: PromiseOrValue<BytesLike>,
    _connectedTCR: PromiseOrValue<string>,
    _registrationMetaEvidence: PromiseOrValue<string>,
    _clearingMetaEvidence: PromiseOrValue<string>,
    _governor: PromiseOrValue<string>,
    _baseDeposits: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _challengePeriodDuration: PromiseOrValue<BigNumberish>,
    _stakeMultipliers: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _relayContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  instances(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _connectedTCR: PromiseOrValue<string>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _baseDeposits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _stakeMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _relayContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    instances(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _connectedTCR: PromiseOrValue<string>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _baseDeposits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _stakeMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _relayContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    instances(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      _arbitrator: PromiseOrValue<string>,
      _arbitratorExtraData: PromiseOrValue<BytesLike>,
      _connectedTCR: PromiseOrValue<string>,
      _registrationMetaEvidence: PromiseOrValue<string>,
      _clearingMetaEvidence: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _baseDeposits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _challengePeriodDuration: PromiseOrValue<BigNumberish>,
      _stakeMultipliers: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _relayContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    instances(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
