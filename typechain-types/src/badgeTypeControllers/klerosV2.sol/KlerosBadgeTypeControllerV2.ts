/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface KlerosBadgeTypeControllerV2Interface extends utils.Interface {
  functions: {
    "arbitrator()": FunctionFragment;
    "badgeRequestValue(uint256)": FunctionFragment;
    "balanceOf(uint256,address)": FunctionFragment;
    "canRequestBadge(uint256,address)": FunctionFragment;
    "claimBadge(uint256,address)": FunctionFragment;
    "createBadgeType(uint256,bytes)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "klerosBadge(uint256,address)": FunctionFragment;
    "klerosBadgeType(uint256)": FunctionFragment;
    "requestBadge(address,uint256,address,bytes)": FunctionFragment;
    "tcrFactory()": FunctionFragment;
    "theBadge()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arbitrator"
      | "badgeRequestValue"
      | "balanceOf"
      | "canRequestBadge"
      | "claimBadge"
      | "createBadgeType"
      | "initialize"
      | "klerosBadge"
      | "klerosBadgeType"
      | "requestBadge"
      | "tcrFactory"
      | "theBadge"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeRequestValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canRequestBadge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBadge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBadgeType",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "klerosBadge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "klerosBadgeType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestBadge",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tcrFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "theBadge", values?: undefined): string;

  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "badgeRequestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canRequestBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBadgeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "klerosBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "klerosBadgeType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tcrFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "theBadge", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "MintKlerosBadge(address,uint256,address,string)": EventFragment;
    "NewKlerosStrategy(uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintKlerosBadge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKlerosStrategy"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MintKlerosBadgeEventObject {
  callee: string;
  badgeTypeId: BigNumber;
  to: string;
  evidence: string;
}
export type MintKlerosBadgeEvent = TypedEvent<
  [string, BigNumber, string, string],
  MintKlerosBadgeEventObject
>;

export type MintKlerosBadgeEventFilter = TypedEventFilter<MintKlerosBadgeEvent>;

export interface NewKlerosStrategyEventObject {
  strategyId: BigNumber;
  klerosTCRAddress: string;
  registrationMetadata: string;
}
export type NewKlerosStrategyEvent = TypedEvent<
  [BigNumber, string, string],
  NewKlerosStrategyEventObject
>;

export type NewKlerosStrategyEventFilter =
  TypedEventFilter<NewKlerosStrategyEvent>;

export interface KlerosBadgeTypeControllerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KlerosBadgeTypeControllerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbitrator(overrides?: CallOverrides): Promise<[string]>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canRequestBadge(
      _badgeId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _theBadge: PromiseOrValue<string>,
      _arbitrator: PromiseOrValue<string>,
      _tcrFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    klerosBadge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        itemID: string;
        callee: string;
        deposit: BigNumber;
      }
    >;

    klerosBadgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { tcrList: string }>;

    requestBadge(
      callee: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tcrFactory(overrides?: CallOverrides): Promise<[string]>;

    theBadge(overrides?: CallOverrides): Promise<[string]>;
  };

  arbitrator(overrides?: CallOverrides): Promise<string>;

  badgeRequestValue(
    badgeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    badgeId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canRequestBadge(
    _badgeId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimBadge(
    badgeId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBadgeType(
    badgeId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _theBadge: PromiseOrValue<string>,
    _arbitrator: PromiseOrValue<string>,
    _tcrFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  klerosBadge(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      itemID: string;
      callee: string;
      deposit: BigNumber;
    }
  >;

  klerosBadgeType(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  requestBadge(
    callee: PromiseOrValue<string>,
    badgeId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tcrFactory(overrides?: CallOverrides): Promise<string>;

  theBadge(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    arbitrator(overrides?: CallOverrides): Promise<string>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRequestBadge(
      _badgeId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _theBadge: PromiseOrValue<string>,
      _arbitrator: PromiseOrValue<string>,
      _tcrFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    klerosBadge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        itemID: string;
        callee: string;
        deposit: BigNumber;
      }
    >;

    klerosBadgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    requestBadge(
      callee: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tcrFactory(overrides?: CallOverrides): Promise<string>;

    theBadge(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MintKlerosBadge(address,uint256,address,string)"(
      callee?: PromiseOrValue<string> | null,
      badgeTypeId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      evidence?: null
    ): MintKlerosBadgeEventFilter;
    MintKlerosBadge(
      callee?: PromiseOrValue<string> | null,
      badgeTypeId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      evidence?: null
    ): MintKlerosBadgeEventFilter;

    "NewKlerosStrategy(uint256,address,string)"(
      strategyId?: PromiseOrValue<BigNumberish> | null,
      klerosTCRAddress?: PromiseOrValue<string> | null,
      registrationMetadata?: null
    ): NewKlerosStrategyEventFilter;
    NewKlerosStrategy(
      strategyId?: PromiseOrValue<BigNumberish> | null,
      klerosTCRAddress?: PromiseOrValue<string> | null,
      registrationMetadata?: null
    ): NewKlerosStrategyEventFilter;
  };

  estimateGas: {
    arbitrator(overrides?: CallOverrides): Promise<BigNumber>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRequestBadge(
      _badgeId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _theBadge: PromiseOrValue<string>,
      _arbitrator: PromiseOrValue<string>,
      _tcrFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    klerosBadge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    klerosBadgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestBadge(
      callee: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tcrFactory(overrides?: CallOverrides): Promise<BigNumber>;

    theBadge(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    arbitrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeRequestValue(
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRequestBadge(
      _badgeId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBadge(
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBadgeType(
      badgeId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _theBadge: PromiseOrValue<string>,
      _arbitrator: PromiseOrValue<string>,
      _tcrFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    klerosBadge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    klerosBadgeType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestBadge(
      callee: PromiseOrValue<string>,
      badgeId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tcrFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    theBadge(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
