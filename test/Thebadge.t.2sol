// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

import "forge-std/Test.sol";

import { Config } from "./utils/Config.sol";
import { TheBadge, TheBadgeLogic } from "./utils/Config.sol";

contract ThebadgeTest is Config {
    //inside config.sol, there are theBade instance, klerosController instance
    // admin
    // vegeta
    // goku
    // feeCollector
    // minter
    // creator

    // test pause() -- only should be call by (PAUSER_ROLE, msg.sender)
    function test_pause_shouldRevert() public {
        vm.prank(admin);
        vm.expectRevert();
        theBadge.pause();
    }

    // test unpause() -- only should be call by (UNPAUSER_ROLE, msg.sender)
    function test_unpause_shouldRevert() public {
        vm.prank(admin);
        vm.expectRevert();
        theBadge.unpause();
    }

    //test mint

    function test_mint_shouldRevert_badgeModelNotFound() public {
        vm.prank(creator);
        theBadgeLogic.registerBadgeModelCreator("newCreator");
        // create badgeModel
        string memory controllerName = "controllerName";
        uint256 creatorFee = 100;
        uint256 validFor = 10;
        string memory metadata = "metadata";
        bytes memory data = "data";

        TheBadgeLogic.CreateBadgeModel memory badgeModel = TheBadgeLogic.CreateBadgeModel(
            metadata,
            controllerName,
            creatorFee,
            validFor
        );
        vm.prank(creator);
        theBadge.createBadgeModel(badgeModel, data);

        uint256 nonExistentBadgeModelId = 999;
        vm.prank(creator);
        vm.expectRevert(TheBadge.TheBadge__requestBadge_badgeModelNotFound.selector);
        theBadge.mint(nonExistentBadgeModelId, admin, "tokenURI", "data");
    }

    // function test_mint_shouldRevert_wrongValue() public {
    //     vm.prank(admin);
    //     vm.expectRevert(TheBadge.TheBadge__requestBadge_wrongValue.selector);
    //     theBadge.mint(1, admin, "tokenURI", "data");
    // }

    // function test_mint_shouldRevert_isPaused() public {
    //     vm.prank(admin);
    //     vm.expectRevert(TheBadge.TheBadge__requestBadge_isPaused.selector);
    //     theBadge.mint(2, admin, "tokenURI", "data");
    // }

    // function test_mint_shouldRevert_controllerIsPaused() public {
    //     vm.prank(admin);
    //     vm.expectRevert(TheBadge.TheBadge__requestBadge_controllerIsPaused.selector);
    //     theBadge.mint(3, admin, "tokenURI", "data");
    // }
}
