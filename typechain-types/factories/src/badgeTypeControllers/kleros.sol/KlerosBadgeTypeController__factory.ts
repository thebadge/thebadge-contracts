/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  KlerosBadgeTypeController,
  KlerosBadgeTypeControllerInterface,
} from "../../../../src/badgeTypeControllers/kleros.sol/KlerosBadgeTypeController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_theBadge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_arbitrator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tcrFactory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__claimBadge_insufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_TCRListAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__createBadgeType_badgeTypeAlreadyCreated",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_alreadyMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_isPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongBadgeType",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__mintBadge_wrongValue",
    type: "error",
  },
  {
    inputs: [],
    name: "KlerosBadgeTypeController__onlyTheBadge_senderNotTheBadge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "badgeTypeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "evidence",
        type: "string",
      },
    ],
    name: "MintKlerosBadge",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "strategyId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "klerosTCRAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "registrationMetadata",
        type: "string",
      },
    ],
    name: "NewKlerosStrategy",
    type: "event",
  },
  {
    inputs: [],
    name: "arbitrator",
    outputs: [
      {
        internalType: "contract IArbitrator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
    ],
    name: "badgeRequestValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "canRequestBadge",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "claimBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "createBadgeType",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "klerosBadge",
    outputs: [
      {
        internalType: "bytes32",
        name: "itemID",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deposit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "klerosBadgeType",
    outputs: [
      {
        internalType: "address",
        name: "tcrList",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "badgeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "requestBadge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "tcrFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "theBadge",
    outputs: [
      {
        internalType: "contract ITheBadge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014e3380380620014e3833981016040819052620000349162000094565b600080546001600160a01b039485166001600160a01b031991821617909155600180549385169382169390931790925560028054919093169116179055620000de565b80516001600160a01b03811681146200008f57600080fd5b919050565b600080600060608486031215620000aa57600080fd5b620000b58462000077565b9250620000c56020850162000077565b9150620000d56040850162000077565b90509250925092565b6113f580620000ee6000396000f3fe6080604052600436106100a05760003560e01c80639f780b1d116100645780639f780b1d146101d5578063b42f3ba1146101f5578063c833b0a914610208578063caa39ec51461021b578063e677413b1461023b578063eccc52e31461025b57600080fd5b80631f212590146100ac5780633656eec2146100ff5780636cc6cde11461012d57806383a1be0a1461014d5780639e516bd11461016257600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100e26100c7366004610baa565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010b57600080fd5b5061011f61011a366004610beb565b61028b565b6040519081526020016100f6565b34801561013957600080fd5b506001546100e2906001600160a01b031681565b61016061015b366004610c64565b610375565b005b34801561016e57600080fd5b506101b261017d366004610beb565b600460209081526000928352604080842090915290825290208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b039092166020840152908201526060016100f6565b3480156101e157600080fd5b506002546100e2906001600160a01b031681565b610160610203366004610cb0565b61064a565b610160610216366004610beb565b6107e3565b34801561022757600080fd5b506000546100e2906001600160a01b031681565b34801561024757600080fd5b5061011f610256366004610baa565b610949565b34801561026757600080fd5b5061027b610276366004610beb565b610ab2565b60405190151581526020016100f6565b6000828152600360209081526040808320600483528184206001600160a01b038087168652935290832081549192909116156103685781548154604051634aac84e560e01b81526001600160a01b03909216916000918391634aac84e5916102f99160040190815260200190565b606060405180830381865afa158015610316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033a9190610d23565b505090508060ff166001148061035357508060ff166003145b1561036557600194505050505061036f565b50505b6000925050505b92915050565b600083815260036020526040902080546001600160a01b0316156103ac57604051638c495fd560e01b815260040160405180910390fd5b6002546001600160a01b031660006103c684860186610f06565b60015460408083015190519293506001600160a01b038086169363d8dcbd2793909116916103fa9160200190815260200190565b60408051601f1981840301815282825260608701516020840152910160408051601f19818403018152908290526104349291602001611022565b60408051808303601f1901815290829052608086015160a0870151875160e0808a015160c08b01516101008c015160208d0151938b901b6001600160e01b031916895261048b9998600097969594906004016110a6565b600060405180830381600087803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b5050505060006001836001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105239190611169565b61052d9190611198565b60405163a2f7b3a560e01b8152600481018290529091506000906001600160a01b0385169063a2f7b3a5906024016020604051808303816000875af115801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e91906111ab565b90506001600160a01b0381166105c75760405163f4864ae560e01b815260040160405180910390fd5b60408051602080820183526001600160a01b0384811680845260008d8152600390935291849020925183546001600160a01b0319169116179091556080850151915190918a917f4974a28236fb408a23b476af1c6421fbce625584731e7402e88fb4256a508ded91610638916111cf565b60405180910390a35050505050505050565b600061065585610949565b90508034146106775760405163361e7e3b60e21b815260040160405180910390fd5b6000858152600360205260408120805490916001600160a01b03909116906106a1858701876111e2565b80516040516309fa7ca560e21b81529192506001600160a01b038416916327e9f2949134916106d391906004016111cf565b6000604051808303818588803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050505050604051806060016040528082600001516040516020016107259190611265565b60408051808303601f19018152918152815160209283012083526001600160a01b038d8116848401819052349483019490945260008d8152600484528281208d83168083529085529083902086518155938601516001850180546001600160a01b031916919093161790915593810151600290920191909155835190518b92917e5f9a2814a1b2f0b782939610bff263042d3460b58e0663e1b1705e8aad4891916107d091906111cf565b60405180910390a4505050505050505050565b600082815260036020908152604080832060048084528285206001600160a01b0380881687529452938290208154815493516374e120b360e11b8152929591941692839263e9c241669261083c92910190815260200190565b600060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b5050600054604051635695430160e01b81526001600160a01b039091169250635695430191506108a39088908890600290600401611297565b600060405180830381600087803b1580156108bd57600080fd5b505af11580156108d1573d6000803e3d6000fd5b5050505047826002015411156108fa576040516303854c6760e41b815260040160405180910390fd5b600182015460028301546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561093a573d6000803e3d6000fd5b50506000600290910155505050565b6000818152600360205260408082208054600154835163063d63db60e11b8152935192936001600160a01b039283169386939092169163f7434ea9918591630c7ac7b69160048082019288929091908290030181865afa1580156109b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d991908101906112d9565b6040518263ffffffff1660e01b81526004016109f591906111cf565b602060405180830381865afa158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a369190611169565b90506000826001600160a01b031663bb0b86ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190611169565b9050610aa88183611350565b9695505050505050565b60008054604051633cc5d99960e21b8152600481018590526001600160a01b0384811660248301528392169063f3176664906044016040805180830381865afa158015610b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b279190611363565b905080602001516000148015610b6b5750600181516004811115610b4d57610b4d611281565b1480610b6b5750600281516004811115610b6957610b69611281565b145b15610b7a57600091505061036f565b60008160200151118015610b915750806020015142105b15610ba057600091505061036f565b5060019392505050565b600060208284031215610bbc57600080fd5b5035919050565b6001600160a01b0381168114610bd857600080fd5b50565b8035610be681610bc3565b919050565b60008060408385031215610bfe57600080fd5b823591506020830135610c1081610bc3565b809150509250929050565b60008083601f840112610c2d57600080fd5b50813567ffffffffffffffff811115610c4557600080fd5b602083019150836020828501011115610c5d57600080fd5b9250929050565b600080600060408486031215610c7957600080fd5b83359250602084013567ffffffffffffffff811115610c9757600080fd5b610ca386828701610c1b565b9497909650939450505050565b600080600080600060808688031215610cc857600080fd5b8535610cd381610bc3565b9450602086013593506040860135610cea81610bc3565b9250606086013567ffffffffffffffff811115610d0657600080fd5b610d1288828901610c1b565b969995985093965092949392505050565b600080600060608486031215610d3857600080fd5b835160ff81168114610d4957600080fd5b602085015160409095015190969495509392505050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610d9a57610d9a610d60565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610dc957610dc9610d60565b604052919050565b600067ffffffffffffffff821115610deb57610deb610d60565b50601f01601f191660200190565b600082601f830112610e0a57600080fd5b8135610e1d610e1882610dd1565b610da0565b818152846020838601011115610e3257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112610e6057600080fd5b6040516080810181811067ffffffffffffffff82111715610e8357610e83610d60565b604052806080840185811115610e9857600080fd5b845b81811015610eb2578035835260209283019201610e9a565b509195945050505050565b600082601f830112610ece57600080fd5b6040516060810181811067ffffffffffffffff82111715610ef157610ef1610d60565b604052806060840185811115610e9857600080fd5b600060208284031215610f1857600080fd5b813567ffffffffffffffff80821115610f3057600080fd5b908301906101c08286031215610f4557600080fd5b610f4d610d76565b610f5683610bdb565b8152610f6460208401610bdb565b60208201526040830135604082015260608301356060820152608083013582811115610f8f57600080fd5b610f9b87828601610df9565b60808301525060a083013582811115610fb357600080fd5b610fbf87828601610df9565b60a08301525060c083013560c0820152610fdc8660e08501610e4f565b60e0820152610fef866101608501610ebd565b61010082015295945050505050565b60005b83811015611019578181015183820152602001611001565b50506000910152565b60008351611034818460208801610ffe565b835190830190611048818360208801610ffe565b01949350505050565b60008151808452611069816020860160208601610ffe565b601f01601f19169290920160200192915050565b8060005b60038110156110a0578151845260209384019390910190600101611081565b50505050565b6001600160a01b038b811682526101e06020808401829052600092906110ce8584018f611051565b9250818d16604086015284830360608601526110ea838d611051565b925084830360808601526110fe838c611051565b9350818a1660a086015260c08501925088915060005b600481101561113157825184529281019291810191600101611114565b505050508461014083015261114a61016083018561107d565b6001600160a01b0383166101c08301529b9a5050505050505050505050565b60006020828403121561117b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561036f5761036f611182565b6000602082840312156111bd57600080fd5b81516111c881610bc3565b9392505050565b6020815260006111c86020830184611051565b6000602082840312156111f457600080fd5b813567ffffffffffffffff8082111561120c57600080fd5b908301906020828603121561122057600080fd5b60405160208101818110838211171561123b5761123b610d60565b60405282358281111561124d57600080fd5b61125987828601610df9565b82525095945050505050565b60008251611277818460208701610ffe565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b8381526001600160a01b038316602082015260608101600583106112cb57634e487b7160e01b600052602160045260246000fd5b826040830152949350505050565b6000602082840312156112eb57600080fd5b815167ffffffffffffffff81111561130257600080fd5b8201601f8101841361131357600080fd5b8051611321610e1882610dd1565b81815285602083850101111561133657600080fd5b611347826020830160208601610ffe565b95945050505050565b8082018082111561036f5761036f611182565b60006040828403121561137557600080fd5b6040516040810181811067ffffffffffffffff8211171561139857611398610d60565b6040528251600581106113aa57600080fd5b8152602092830151928101929092525091905056fea2646970667358221220f7299efadbbd3e24585b59c3a103c0089e0ceb0d05abc8637b46d3fcdfaae77164736f6c63430008110033";

type KlerosBadgeTypeControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KlerosBadgeTypeControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KlerosBadgeTypeController__factory extends ContractFactory {
  constructor(...args: KlerosBadgeTypeControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _theBadge: PromiseOrValue<string>,
    _arbitrator: PromiseOrValue<string>,
    _tcrFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KlerosBadgeTypeController> {
    return super.deploy(
      _theBadge,
      _arbitrator,
      _tcrFactory,
      overrides || {}
    ) as Promise<KlerosBadgeTypeController>;
  }
  override getDeployTransaction(
    _theBadge: PromiseOrValue<string>,
    _arbitrator: PromiseOrValue<string>,
    _tcrFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _theBadge,
      _arbitrator,
      _tcrFactory,
      overrides || {}
    );
  }
  override attach(address: string): KlerosBadgeTypeController {
    return super.attach(address) as KlerosBadgeTypeController;
  }
  override connect(signer: Signer): KlerosBadgeTypeController__factory {
    return super.connect(signer) as KlerosBadgeTypeController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KlerosBadgeTypeControllerInterface {
    return new utils.Interface(_abi) as KlerosBadgeTypeControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KlerosBadgeTypeController {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as KlerosBadgeTypeController;
  }
}
